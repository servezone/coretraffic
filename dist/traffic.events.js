"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
var TrafficEnvironment = require("./traffic.environment");
var tickerObs = plugins.rx.Observable
    .interval(5000).repeat();
exports.noTicker = false;
exports.startTicker = function () {
    var done = plugins.q.defer();
    exports.tickerSub = tickerObs.subscribe(function (x) {
        console.log('TickerCycle#: ' + x);
        TrafficEnvironment.detectContainerChange();
    }, function (err) {
        console.log('Error: ' + err);
    }, function () {
        console.log('Completed');
    });
    console.log("subscribed ticker");
    if (exports.noTicker)
        exports.tickerSub.dispose();
    return done.promise;
};
exports.stopTicker = function () {
    exports.tickerSub.dispose();
};
exports.cooldown = function () {
    var done = plugins.q.defer();
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMuZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBNEM7QUFDNUMsSUFBTyxPQUFPLFdBQVcsbUJBQW1CLENBQUMsQ0FBQztBQUM5QyxJQUFPLGtCQUFrQixXQUFXLHVCQUF1QixDQUFDLENBQUM7QUFFN0QsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVO0tBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUdsQixnQkFBUSxHQUFHLEtBQUssQ0FBQztBQUNqQixtQkFBVyxHQUFHO0lBQ3JCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsaUJBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUMzQixVQUFVLENBQUM7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0MsQ0FBQyxFQUNELFVBQVUsR0FBRztRQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsRUFDRDtRQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUNKLENBQUM7SUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakMsRUFBRSxDQUFDLENBQUMsZ0JBQVEsQ0FBQztRQUFDLGlCQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBRVMsa0JBQVUsR0FBRztJQUNwQixpQkFBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQTtBQUVVLGdCQUFRLEdBQUc7SUFDbEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDLENBQUMiLCJmaWxlIjoidHJhZmZpYy5ldmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5pbXBvcnQgcGx1Z2lucyA9IHJlcXVpcmUoXCIuL3RyYWZmaWMucGx1Z2luc1wiKTtcbmltcG9ydCBUcmFmZmljRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi90cmFmZmljLmVudmlyb25tZW50XCIpO1xuXG5sZXQgdGlja2VyT2JzID0gcGx1Z2lucy5yeC5PYnNlcnZhYmxlXG4gICAgLmludGVydmFsKDUwMDApLnJlcGVhdCgpO1xuXG5leHBvcnQgbGV0IHRpY2tlclN1YjtcbmV4cG9ydCBsZXQgbm9UaWNrZXIgPSBmYWxzZTtcbmV4cG9ydCBsZXQgc3RhcnRUaWNrZXIgPSBmdW5jdGlvbigpe1xuICAgIGxldCBkb25lID0gcGx1Z2lucy5xLmRlZmVyKCk7XG4gICAgdGlja2VyU3ViID0gdGlja2VyT2JzLnN1YnNjcmliZShcbiAgICAgICAgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaWNrZXJDeWNsZSM6ICcgKyB4KTtcbiAgICAgICAgICAgIFRyYWZmaWNFbnZpcm9ubWVudC5kZXRlY3RDb250YWluZXJDaGFuZ2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOiAnICsgZXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvbXBsZXRlZCcpO1xuICAgICAgICB9XG4gICAgKTtcbiAgICBjb25zb2xlLmxvZyhcInN1YnNjcmliZWQgdGlja2VyXCIpO1xuICAgIGlmIChub1RpY2tlcikgdGlja2VyU3ViLmRpc3Bvc2UoKTtcbiAgICByZXR1cm4gZG9uZS5wcm9taXNlO1xufTtcblxuZXhwb3J0IGxldCBzdG9wVGlja2VyID0gZnVuY3Rpb24oKXtcbiAgICB0aWNrZXJTdWIuZGlzcG9zZSgpO1xufVxuXG5leHBvcnQgbGV0IGNvb2xkb3duID0gZnVuY3Rpb24oKXtcbiAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgIHJldHVybiBkb25lLnByb21pc2U7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
