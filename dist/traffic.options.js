"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
var TrafficEnvironment = require("./traffic.environment");
exports.certOrigin = false; // when true, certificates are synced using git
exports.certLe = false; // when true, new certificates are obtained from Lets Encrypt
exports.cfUpdate = false; // when true, cloudflare is updated for containers on the same node
exports.sshKey = false;
exports.dockerSock = false;
exports.buildOptions = function () {
    var done = plugins.q.defer();
    plugins.beautylog.log("now building options...");
    exports.certOrigin = TrafficEnvironment.checkCertOriginSync();
    exports.certLe = TrafficEnvironment.checkCertLeSync();
    exports.cfUpdate = TrafficEnvironment.checkCfUpdateSync();
    exports.sshKey = TrafficEnvironment.checkSshKeySync();
    if (TrafficEnvironment.checkDockersock()) {
        exports.dockerSock = true;
    }
    else {
        plugins.beautylog.error("no access to docker.sock defeats the purpose of this container, we exit!");
        process.exit(1);
    }
    done.resolve();
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMub3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQTRDO0FBQzVDLElBQU8sT0FBTyxXQUFXLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsSUFBTyxrQkFBa0IsV0FBVyx1QkFBdUIsQ0FBQyxDQUFDO0FBRWxELGtCQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsK0NBQStDO0FBQ25FLGNBQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyw2REFBNkQ7QUFDN0UsZ0JBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxtRUFBbUU7QUFDckYsY0FBTSxHQUFHLEtBQUssQ0FBQztBQUNmLGtCQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ25CLG9CQUFZLEdBQUc7SUFDdEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ2pELGtCQUFVLEdBQUcsa0JBQWtCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUN0RCxjQUFNLEdBQUcsa0JBQWtCLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDOUMsZ0JBQVEsR0FBRyxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ2xELGNBQU0sR0FBRyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM5QyxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFBLENBQUM7UUFDdEMsa0JBQVUsR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsMEVBQTBFLENBQUMsQ0FBQztRQUNwRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDLENBQUMiLCJmaWxlIjoidHJhZmZpYy5vcHRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuaW1wb3J0IHBsdWdpbnMgPSByZXF1aXJlKFwiLi90cmFmZmljLnBsdWdpbnNcIik7XG5pbXBvcnQgVHJhZmZpY0Vudmlyb25tZW50ID0gcmVxdWlyZShcIi4vdHJhZmZpYy5lbnZpcm9ubWVudFwiKTtcblxuZXhwb3J0IGxldCBjZXJ0T3JpZ2luID0gZmFsc2U7IC8vIHdoZW4gdHJ1ZSwgY2VydGlmaWNhdGVzIGFyZSBzeW5jZWQgdXNpbmcgZ2l0XG5leHBvcnQgbGV0IGNlcnRMZSA9IGZhbHNlOyAvLyB3aGVuIHRydWUsIG5ldyBjZXJ0aWZpY2F0ZXMgYXJlIG9idGFpbmVkIGZyb20gTGV0cyBFbmNyeXB0XG5leHBvcnQgbGV0IGNmVXBkYXRlID0gZmFsc2U7IC8vIHdoZW4gdHJ1ZSwgY2xvdWRmbGFyZSBpcyB1cGRhdGVkIGZvciBjb250YWluZXJzIG9uIHRoZSBzYW1lIG5vZGVcbmV4cG9ydCBsZXQgc3NoS2V5ID0gZmFsc2U7XG5leHBvcnQgbGV0IGRvY2tlclNvY2sgPSBmYWxzZTtcbmV4cG9ydCBsZXQgYnVpbGRPcHRpb25zID0gZnVuY3Rpb24oKXtcbiAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcIm5vdyBidWlsZGluZyBvcHRpb25zLi4uXCIpO1xuICAgIGNlcnRPcmlnaW4gPSBUcmFmZmljRW52aXJvbm1lbnQuY2hlY2tDZXJ0T3JpZ2luU3luYygpO1xuICAgIGNlcnRMZSA9IFRyYWZmaWNFbnZpcm9ubWVudC5jaGVja0NlcnRMZVN5bmMoKTtcbiAgICBjZlVwZGF0ZSA9IFRyYWZmaWNFbnZpcm9ubWVudC5jaGVja0NmVXBkYXRlU3luYygpO1xuICAgIHNzaEtleSA9IFRyYWZmaWNFbnZpcm9ubWVudC5jaGVja1NzaEtleVN5bmMoKTtcbiAgICBpZiAoVHJhZmZpY0Vudmlyb25tZW50LmNoZWNrRG9ja2Vyc29jaygpKXtcbiAgICAgICAgZG9ja2VyU29jayA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cuZXJyb3IoXCJubyBhY2Nlc3MgdG8gZG9ja2VyLnNvY2sgZGVmZWF0cyB0aGUgcHVycG9zZSBvZiB0aGlzIGNvbnRhaW5lciwgd2UgZXhpdCFcIik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG4gICAgZG9uZS5yZXNvbHZlKCk7XG4gICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
