"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
exports.getContainerData = function (typeArg) {
    var done = plugins.q.defer();
    plugins.request.get("http://unix:/var/run/docker.sock:/containers/json")
        .on("data", function (data) {
        var dataString = data.toString("utf8");
        var dataObject = JSON.parse(dataString);
        var detailedDataObject = [];
        //switch types
        switch (typeArg) {
            case "detailed":
                var recursiveCounter_1 = 0;
                var makeDetailed_1 = function () {
                    if (typeof dataObject[recursiveCounter_1] != "undefined") {
                        plugins.request.get("http://unix:/var/run/docker.sock:/containers/"
                            + dataObject[recursiveCounter_1].Id
                            + "/json")
                            .on("data", function (data) {
                            recursiveCounter_1++;
                            var dataString = data.toString("utf8");
                            var dataObject = JSON.parse(dataString);
                            detailedDataObject.push(dataObject);
                            makeDetailed_1();
                        });
                    }
                    else {
                        done.resolve(detailedDataObject);
                    }
                };
                makeDetailed_1();
                break;
            case "overview":
                done.resolve(dataObject);
            default:
                break;
        }
        ;
    });
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMuZG9ja2Vyc29jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQTRDO0FBQzVDLElBQU8sT0FBTyxXQUFXLG1CQUFtQixDQUFDLENBQUM7QUFHbkMsd0JBQWdCLEdBQUcsVUFBUyxPQUFjO0lBQ2pELElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELENBQUM7U0FDbkUsRUFBRSxDQUFDLE1BQU0sRUFBQyxVQUFTLElBQUk7UUFDcEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBRTVCLGNBQWM7UUFDZCxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO1lBQ2IsS0FBSyxVQUFVO2dCQUNYLElBQUksa0JBQWdCLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLGNBQVksR0FBRztvQkFDZixFQUFFLENBQUEsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxrQkFBZ0IsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFBLENBQUM7d0JBQ25ELE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtDQUErQzs4QkFDekQsVUFBVSxDQUFDLGtCQUFnQixDQUFDLENBQUMsRUFBRTs4QkFDaEMsT0FBTyxDQUFDOzZCQUNaLEVBQUUsQ0FBQyxNQUFNLEVBQUMsVUFBUyxJQUFJOzRCQUNwQixrQkFBZ0IsRUFBRSxDQUFDOzRCQUNuQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzRCQUN2QyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzRCQUN4QyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7NEJBQ3BDLGNBQVksRUFBRSxDQUFDO3dCQUNuQixDQUFDLENBQUMsQ0FBQztvQkFDWCxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztvQkFDckMsQ0FBQztnQkFDTCxDQUFDLENBQUM7Z0JBQ0YsY0FBWSxFQUFFLENBQUM7Z0JBQ2YsS0FBSyxDQUFDO1lBQ1YsS0FBSyxVQUFVO2dCQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDN0I7Z0JBQ0ksS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUFBLENBQUM7SUFFTixDQUFDLENBQUMsQ0FBQztJQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hCLENBQUMsQ0FBQyIsImZpbGUiOiJ0cmFmZmljLmRvY2tlcnNvY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5pbXBvcnQgcGx1Z2lucyA9IHJlcXVpcmUoXCIuL3RyYWZmaWMucGx1Z2luc1wiKTtcbmltcG9ydCBUcmFmZmljRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi90cmFmZmljLmVudmlyb25tZW50XCIpO1xuXG5leHBvcnQgbGV0IGdldENvbnRhaW5lckRhdGEgPSBmdW5jdGlvbih0eXBlQXJnOnN0cmluZyl7XG4gICAgdmFyIGRvbmUgPSBwbHVnaW5zLnEuZGVmZXIoKTtcbiAgICBwbHVnaW5zLnJlcXVlc3QuZ2V0KFwiaHR0cDovL3VuaXg6L3Zhci9ydW4vZG9ja2VyLnNvY2s6L2NvbnRhaW5lcnMvanNvblwiKVxuICAgICAgICAub24oXCJkYXRhXCIsZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBsZXQgZGF0YVN0cmluZyA9IGRhdGEudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgICAgICAgbGV0IGRhdGFPYmplY3QgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpO1xuICAgICAgICAgICAgbGV0IGRldGFpbGVkRGF0YU9iamVjdCA9IFtdO1xuXG4gICAgICAgICAgICAvL3N3aXRjaCB0eXBlc1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlQXJnKXtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGV0YWlsZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3Vyc2l2ZUNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWFrZURldGFpbGVkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBkYXRhT2JqZWN0W3JlY3Vyc2l2ZUNvdW50ZXJdICE9IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbnMucmVxdWVzdC5nZXQoXCJodHRwOi8vdW5peDovdmFyL3J1bi9kb2NrZXIuc29jazovY29udGFpbmVycy9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBkYXRhT2JqZWN0W3JlY3Vyc2l2ZUNvdW50ZXJdLklkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXCIvanNvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oXCJkYXRhXCIsZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmVDb3VudGVyKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YVN0cmluZyA9IGRhdGEudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFPYmplY3QgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsZWREYXRhT2JqZWN0LnB1c2goZGF0YU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlRGV0YWlsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUucmVzb2x2ZShkZXRhaWxlZERhdGFPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBtYWtlRGV0YWlsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm92ZXJ2aWV3XCI6XG4gICAgICAgICAgICAgICAgICAgIGRvbmUucmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
